<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Blog</title>
  <icon>https://www.gravatar.com/avatar/d4311f850d16621136d9fcdcca582286</icon>
  <subtitle>不忘初心，方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lhgcool.club/"/>
  <updated>2018-07-05T13:43:20.000Z</updated>
  <id>http://www.lhgcool.club/</id>
  
  <author>
    <name>Hetty</name>
    <email>mxhb01@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack+es6+react搭建项目（3：相关配置）</title>
    <link href="http://www.lhgcool.club/2018/07/05/webpack-es6-react%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.lhgcool.club/2018/07/05/webpack-es6-react搭建项目（三）/</id>
    <published>2018-07-05T10:16:40.000Z</published>
    <updated>2018-07-05T13:43:20.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="#devtool">配置devtool</a></li><li><a href="#stage-1">配置babel stage-1</a></li><li><a href="#eslint">ESLint语法校验</a></li><li><a href="#elseConfig">其他常用加载器</a></li></ol><p><strong>1. <span id="devtool">配置devtool</span></strong><br>为便于开发调试，在chorme中调试源代码，需要在<code>webpack.config.js</code>中配置devtool<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>, <span class="comment">// source 查看源代码，有助于开发调试</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. <span id="stage-1">配置babel stage-1</span></strong><br><code>npm install babel-preset-stage-1 --save-dev</code><br>修改<code>.babelrc</code>配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"stage-1"</span></span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. <span id="eslint">ESLint语法校验</span></strong><br>一个<code>javascript</code>语法校验工具，可以像IDE一样静态监测代码错误并提示，需要安装<code>eslint</code>和<code>eslint-loader</code><br><code>npm install eslint eslint-loader --save-dev</code><br>修改<code>webpack.config.js</code>，新增一条规则配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在项目根目录下新建<code>.eslintrc.json</code>文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时，运行项目<code>npm run dev</code>，会报错<code>error  Parsing error: The keyword &#39;import&#39; is reserved</code>，因为项目中使用的es6新语法还不能被识别，需要安装babel-eslint进行转义。<br><code>npm install babel-eslint --save-dev</code><br>修改<code>.eslintrc.json</code>文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新运行项目<code>npm run dev</code>，项目正常运行，不会报错。<br><strong>4. <span id="elseConfig">其他常用加载器</span></strong><br>  其他常用加载器还有很多，这里简单将css配置一下，其余自行按需配置。最后<code>webpack.config.js</code>配置如下：<br>  <code>css-loader</code>: 解析css代码<br>  <code>style-loader</code>: 将编译后的css样式导入到html中<br>  <code>less-loader</code>: 加载和编译less文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'babel-polyfill'</span>,</span><br><span class="line">    <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">    <span class="string">'webpack-dev-server/client?http://localhost:9000'</span>,</span><br><span class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">    path.resolve(__dirname, <span class="string">'./src/index.js'</span>) <span class="comment">// __dirname表示当前目录</span></span><br><span class="line">  ], </span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出路径</span></span><br><span class="line">    filename: <span class="string">'[name]-[hash].js'</span> <span class="comment">// 打包后的文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>, <span class="comment">// source 查看源代码，有助于开发调试</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// babel-loader: babel加载器</span></span><br><span class="line">    <span class="comment">// babel-preset-2015：支持es2015</span></span><br><span class="line">    <span class="comment">// bable-preset-react：jsx转换成js</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'style-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'less-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              sourceMap: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'./src/index.html'</span>),</span><br><span class="line">      inject: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#devtool&quot;&gt;配置devtool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stage-1&quot;&gt;配置babel stage-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#eslint&quot;&gt;ESLint语法校验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elseConfig&quot;&gt;其他常用加载器&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;span id=&quot;devtool&quot;&gt;配置devtool&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;为便于开发调试，在chorme中调试源代码，需要在&lt;code&gt;webpack.config.js&lt;/code&gt;中配置devtool&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  devtool: &lt;span class=&quot;string&quot;&gt;&#39;eval-source-map&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// source 查看源代码，有助于开发调试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://www.lhgcool.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack+es6+react搭建项目（2：前端服务器+热加载）</title>
    <link href="http://www.lhgcool.club/2018/07/04/webpack-es6-react%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.lhgcool.club/2018/07/04/webpack-es6-react搭建项目（二）/</id>
    <published>2018-07-04T05:17:22.000Z</published>
    <updated>2018-07-05T10:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>webpack-dev-server是一个小型的静态文件服务器，为webpack打包的资源文件提供Web服务。并且提供自动刷新和Hot Module Replacement（模块热替换：前端代码变动后无需刷新整个页面，只把变化的部分替换掉）</p><ol><li><a href="#server">搭建前端服务器</a></li><li><a href="#hotReplace">热更新</a><h3 id="搭建前端服务器"><a href="#搭建前端服务器" class="headerlink" title="搭建前端服务器"></a><span id="server">搭建前端服务器</span></h3>1.搭建前端服务器 <code>npm install webpack-dev-server --save-dev</code><br>2.在项目根目录创建 <code>webpack.server.config.js</code><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(compiler, &#123;</span><br><span class="line">  contentBase: path.resolve(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 默认会以根文件提供本地服务器，这里指定文件夹</span></span><br><span class="line">  historyApiFallback: <span class="literal">true</span>, <span class="comment">// 在开发单页面应用时非常有用，依赖于HTML5 History API，如果设置为true，所有的跳转将指向index.html</span></span><br><span class="line">  port: <span class="number">9000</span>, <span class="comment">// 省略则默认为：8080</span></span><br><span class="line">  publicPath: <span class="string">"/"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">9000</span>, <span class="string">'localhost'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>3.配置启动脚本<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "node webpack.server.config.js",</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>4.输入命令 <code>npm run dev</code> 启动服务器，可以看到改动文件后，项目会自动编译。此时刷新浏览器，可以看到最新的更改</p><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a><span id="hotReplace">热更新</span></h3><p><code>HMR</code>应该是<code>webpack</code>令人非常兴奋的一个特点，它在代码修改后重新打包并发送到浏览器，浏览器将获取的新模块替换老模块，在不刷新浏览器的情况下实现对应用的更新。由于我们使用的是<code>webpack-dev-server</code>，它提供了两种自动刷新方式供我们选择，<code>iframe</code>和<code>inline</code>模式。这里我们选择<code>inline</code>模式，更改<code>webpack.server.config.js</code>。</p><p><strong>1. 配置入口文件</strong> 使用<code>html-webpapck-plugin</code>插件自动引入入口文件，之前我们手动将打包好的js文件引入到index.html中，现在通过插件实现自动引入。<code>npm install html-webpack-plugin --save-dev</code>，在src下创建index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编辑<code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出路径</span></span><br><span class="line">  filename: <span class="string">'[name]-[hash].js'</span> <span class="comment">// 打包后的文件</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: path.resolve(__dirname, <span class="string">'./src/index.html'</span>),</span><br><span class="line">    inject: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong>2. 添加webpack热更新</strong><br>编辑<code>webpack.server.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> WebpackDevServer(compiler, &#123;</span><br><span class="line">  ...</span><br><span class="line">  inline: <span class="literal">true</span>, <span class="comment">// 自动刷新</span></span><br><span class="line">  hot: <span class="literal">true</span> <span class="comment">// 开启模块热替换</span></span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>编辑<code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'webpack-dev-server/client?http://localhost:9000'</span>,</span><br><span class="line">    <span class="string">'webpack/hot/only-dev-server'</span>,</span><br><span class="line">    path.resolve(__dirname, <span class="string">'./src/index.js'</span>) <span class="comment">// __dirname表示当前目录</span></span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编辑<code>index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将APP组件独立出去</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> renderDom = <span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">  render(<span class="xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span>, document.getElementById('app'));</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">renderDom(App);</span></span><br><span class="line"><span class="xml">if (module.hot) &#123;</span></span><br><span class="line"><span class="xml">  module.hot.accept('./App', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    const App = require('./App').default;</span></span><br><span class="line"><span class="xml">    renderDom(App);</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><p>此时，项目可以实现热更新，但此时的热更新无法保存react的state，需要进行以下配置<br><strong>3. 安装react-hot-loader</strong> <code>npm install react-hot-loader --save-dev</code><br>编辑<code>index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AppContainer&#125; <span class="keyword">from</span> <span class="string">'react-hot-loader'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> renderDom = <span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">  render(</span><br><span class="line">    &lt;AppContainer&gt;</span><br><span class="line">      &lt;Component /&gt;</span><br><span class="line">    &lt;<span class="regexp">/AppContainer&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('app')</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure></p><p>编辑<code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  entry: [</span><br><span class="line">    <span class="string">'babel-polyfill'</span>,</span><br><span class="line">    <span class="string">'react-hot-loader/patch'</span>,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编辑<code>.babelrc</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"module"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"react-hot-loader/babel"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完成之后，重启项目<code>npm run dev</code>，可以看到页面在编辑保存之后会实时更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack-dev-server是一个小型的静态文件服务器，为webpack打包的资源文件提供Web服务。并且提供自动刷新和Hot Module Replacement（模块热替换：前端代码变动后无需刷新整个页面，只把变化的部分替换掉）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#server&quot;&gt;搭建前端服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hotReplace&quot;&gt;热更新&lt;/a&gt;&lt;h3 id=&quot;搭建前端服务器&quot;&gt;&lt;a href=&quot;#搭建前端服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建前端服务器&quot;&gt;&lt;/a&gt;&lt;span id=&quot;server&quot;&gt;搭建前端服务器&lt;/span&gt;&lt;/h3&gt;1.搭建前端服务器 &lt;code&gt;npm install webpack-dev-server --save-dev&lt;/code&gt;&lt;br&gt;2.在项目根目录创建 &lt;code&gt;webpack.server.config.js&lt;/code&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://www.lhgcool.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>webpack+es6+react搭建项目（1：基础）</title>
    <link href="http://www.lhgcool.club/2018/07/04/webpack-es6-react%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.lhgcool.club/2018/07/04/webpack-es6-react搭建项目/</id>
    <published>2018-07-04T03:18:34.000Z</published>
    <updated>2018-07-05T13:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.项目初始化：<code>npm init</code><br>2.安装全局webpack环境：<code>npm install webpack -g</code><br>3.安装react、react-dom、webpack<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom --save</span><br><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure></p><p>4.安装babel编译插件<br>  因为我们要用的是es6，浏览器没办法直接识别，所以需要安装babel插件,babel插件是webpack需要的加载器，如果没有这几个加载器我们的jsx语法，和es6语法就会报错。如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader babel-core --save</span><br><span class="line">npm install babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure></p>  <a id="more"></a><p>5.webpack配置：<a href="#webpackConfig">webpack.config.js</a><br>6.运行项目：<code>webpack --config webpack.config.js</code><br>7.项目目录预览<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- your project</span></span><br><span class="line">  |<span class="comment">-- dist</span></span><br><span class="line">    |<span class="comment">-- bundle.js(webpack打包自动生成)</span></span><br><span class="line">    |<span class="comment">-- index.html</span></span><br><span class="line">  |<span class="comment">-- src</span></span><br><span class="line">    |<span class="comment">-- index.js</span></span><br><span class="line">  |<span class="comment">-- package.json</span></span><br><span class="line">  |<span class="comment">-- wabpack.config.js</span></span><br></pre></td></tr></table></figure></p><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./bundle.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDom.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p><span id="webpackConfig">webpack.config.js</span><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">'./src/index.js'</span>), <span class="comment">// __dirname表示当前目录</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>), <span class="comment">// 输出路径</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span> <span class="comment">// 打包后的文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">// babel-loader: babel加载器</span></span><br><span class="line">    <span class="comment">// babel-preset-2015：支持es2015</span></span><br><span class="line">    <span class="comment">// bable-preset-react：jsx转换成js</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">              presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>],</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还可以将webpack.config.js中的babel配置单独抽离出来：新建文件.babelrc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编辑<code>webpack.config.js</code><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过基础搭建可以发现，每次都要重新构建然后刷新index.html，才能得到最新的效果，开发效率极低。下节开始使用<code>webpack-dev-server</code>+<code>react-hot-loader</code>搭建前端服务器并实现热更新，动态刷新组件。</p><p><a href="http://www.cnblogs.com/raion/p/8053799.html" target="_blank" rel="noopener">查看文档链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.项目初始化：&lt;code&gt;npm init&lt;/code&gt;&lt;br&gt;2.安装全局webpack环境：&lt;code&gt;npm install webpack -g&lt;/code&gt;&lt;br&gt;3.安装react、react-dom、webpack&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install react react-dom --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install webpack --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.安装babel编译插件&lt;br&gt;  因为我们要用的是es6，浏览器没办法直接识别，所以需要安装babel插件,babel插件是webpack需要的加载器，如果没有这几个加载器我们的jsx语法，和es6语法就会报错。如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块&lt;br&gt;  &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install babel-loader babel-core --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install babel-preset-es2015 babel-preset-react --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://www.lhgcool.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react Component &amp;&amp; PureComponent</title>
    <link href="http://www.lhgcool.club/2018/06/15/react-Component-PureComponent/"/>
    <id>http://www.lhgcool.club/2018/06/15/react-Component-PureComponent/</id>
    <published>2018-06-15T07:31:37.000Z</published>
    <updated>2018-06-15T07:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>React.Component</code>和<code>React.PureComponent</code>都可以创建组件，但是<code>React.PureComponent</code>对组件的<code>props</code>和<code>state</code>只进行浅比较（比较内存地址），不需要自己写shouldComponentUpdate。一般使用<code>React.PureComponent</code>来进行性能优化。</p><p>对于更复杂的数据结构这可能成为一个问题。例如，假设你想要一个ListOfWords组件来渲染一个逗号分隔的单词列表，并使用一个带了点击按钮名字叫WordAdder的父组件来给子列表添加一个单词。以下代码并不正确：<a id="more"></a><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListOfWords</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;<span class="keyword">this</span>.props.words.join(',')&#125;&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordAdder</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      words: [<span class="symbol">'markla</span>r']</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    <span class="comment">// This section is bad style and causes a bug</span></span><br><span class="line">    const words = <span class="keyword">this</span>.state.words;</span><br><span class="line">    words.push(<span class="symbol">'markla</span>r');</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;words: words&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125; /&gt;</span><br><span class="line">        &lt;<span class="type">ListOfWords</span> words=&#123;<span class="keyword">this</span>.state.words&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>问题是PureComponent将会在this.props.words的新旧值之间做一个简单的比较。由于代码中words数组在WordAdder的handleClick方法中被改变了，尽管数组中的实际单词已经改变，this.props.words的新旧值还是相等的，因此即便ListOfWords具有应该被渲染的新单词，它还是不会更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;React.Component&lt;/code&gt;和&lt;code&gt;React.PureComponent&lt;/code&gt;都可以创建组件，但是&lt;code&gt;React.PureComponent&lt;/code&gt;对组件的&lt;code&gt;props&lt;/code&gt;和&lt;code&gt;state&lt;/code&gt;只进行浅比较（比较内存地址），不需要自己写shouldComponentUpdate。一般使用&lt;code&gt;React.PureComponent&lt;/code&gt;来进行性能优化。&lt;/p&gt;
&lt;p&gt;对于更复杂的数据结构这可能成为一个问题。例如，假设你想要一个ListOfWords组件来渲染一个逗号分隔的单词列表，并使用一个带了点击按钮名字叫WordAdder的父组件来给子列表添加一个单词。以下代码并不正确：
    
    </summary>
    
      <category term="技术" scheme="http://www.lhgcool.club/categories/technology/"/>
    
    
      <category term="react" scheme="http://www.lhgcool.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react propTypes</title>
    <link href="http://www.lhgcool.club/2018/06/14/react-propTypes/"/>
    <id>http://www.lhgcool.club/2018/06/14/react-propTypes/</id>
    <published>2018-06-14T06:17:50.000Z</published>
    <updated>2018-06-14T08:32:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>组件属性类型检查 —— React内置的类型检查功能，需要配置propTypes属性<br><code>注意: React.PropTypes 自 React v15.5 起已弃用。请使用 prop-types 库代替。</code><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">栗子：</span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> <span class="type">PropTypes</span> from <span class="symbol">'prop</span>-types';</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;hello, &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Greeting</span>.propTypes = &#123;</span><br><span class="line">  name: <span class="type">PropTypes</span>.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>PropTypes</code>包含一整套验证器，可用于确保你接收的数据是有效的。在这个示例中，使用了<code>PropTypes.string</code>。当你给属性传递了无效值时，javascript控制台将会打印出警告。处于性能原因，<code>propTypes</code>只在开发模式下进行检查。</p><h4 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h4><p>下面是使用不同的验证器的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line">MyComponent.propTypes = &#123;</span><br><span class="line">  <span class="comment">// 你可以将属性声明为以下 JS 原生类型</span></span><br><span class="line">  optionalArray: PropTypes.array,</span><br><span class="line">  optionalBool: PropTypes.bool,</span><br><span class="line">  optionalFunc: PropTypes.func,</span><br><span class="line">  optionalNumber: PropTypes.number,</span><br><span class="line">  optionalObject: PropTypes.object,</span><br><span class="line">  optionalString: PropTypes.string,</span><br><span class="line">  optionalSymbol: PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任何可被渲染的元素（包括数字、字符串、子元素或数组）。</span></span><br><span class="line">  optionalNode: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个 React 元素</span></span><br><span class="line">  optionalElement: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以声明属性为某个类的实例，这里使用 JS 的</span></span><br><span class="line">  <span class="comment">// instanceof 操作符实现。</span></span><br><span class="line">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以限制你的属性值是某个特定值之一</span></span><br><span class="line">  optionalEnum: PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 限制它为列举类型之一的对象</span></span><br><span class="line">  optionalUnion: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number,</span><br><span class="line">    PropTypes.instanceOf(Message)</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个指定元素类型的数组</span></span><br><span class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个指定类型的对象</span></span><br><span class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个指定属性及其类型的对象</span></span><br><span class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以在任何 PropTypes 属性后面加上 `isRequired` </span></span><br><span class="line">  <span class="comment">// 后缀，这样如果这个属性父组件没有提供时，会打印警告信息</span></span><br><span class="line">  requiredFunc: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任意类型的数据</span></span><br><span class="line">  requiredAny: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以指定一个自定义验证器。它应该在验证失败时返回</span></span><br><span class="line">  <span class="comment">// 一个 Error 对象而不是 `console.warn` 或抛出异常。</span></span><br><span class="line">  <span class="comment">// 不过在 `oneOfType` 中它不起作用。</span></span><br><span class="line">  customProp: <span class="function"><span class="keyword">function</span>(<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不过你可以提供一个自定义的 `arrayOf` 或 `objectOf` </span></span><br><span class="line">  <span class="comment">// 验证器，它应该在验证失败时返回一个 Error 对象。 它被用</span></span><br><span class="line">  <span class="comment">// 于验证数组或对象的每个值。验证器前两个参数的第一个是数组</span></span><br><span class="line">  <span class="comment">// 或对象本身，第二个是它们对应的键。</span></span><br><span class="line">  customArrayProp: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="限制单个子代"><a href="#限制单个子代" class="headerlink" title="限制单个子代"></a>限制单个子代</h4><p>使用<code>PropTypes.element</code>你可以指定只传递一个子代<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">PropTypes</span> from <span class="symbol">'prop</span>-types';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// This must be exactly one element or it will warn.</span></span><br><span class="line">    const children = <span class="keyword">this</span>.props.children;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">MyComponent</span>.propTypes = &#123;</span><br><span class="line">  children: <span class="type">PropTypes</span>.element.isRequired</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="属性默认值"><a href="#属性默认值" class="headerlink" title="属性默认值"></a>属性默认值</h4><p>你可使用配置<code>defaultProps</code>为<code>props</code>定义默认值：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1&gt;<span class="type">Hello</span>, &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为属性指定默认值:</span></span><br><span class="line"><span class="type">Greeting</span>.defaultProps = &#123;</span><br><span class="line">  name: <span class="symbol">'Strange</span>r'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 "Hello, Stranger":</span></span><br><span class="line"><span class="type">ReactDOM</span>.render(</span><br><span class="line">  &lt;<span class="type">Greeting</span> /&gt;,</span><br><span class="line">  document.getElementById(<span class="symbol">'exampl</span>e')</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>如果你在使用<a href="https://babeljs.io/docs/en/babel-plugin-transform-class-properties/" target="_blank" rel="noopener">transform-class-properties</a>的Babel转换器，你也可以在React组件类中声明<code>defaultProps</code>作为静态属性。这个语还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看<a href="https://github.com/tc39/proposal-class-fields" target="_blank" rel="noopener">类字段提议</a>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  static defaultProps = &#123;</span><br><span class="line">    name: <span class="symbol">'strange</span>r'</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;<span class="type">Hello</span>, &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>defaultProps</code>用来确保<code>this.props.name</code>在父组件没有特别指定的情况下，有一个初始值。类型检查发生在<code>defaultProps</code>赋值之后，所以类型检查也会应用到<code>defaultProps</code>上面。</p><p><a href="https://doc.react-china.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">查看文档链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件属性类型检查 —— React内置的类型检查功能，需要配置propTypes属性&lt;br&gt;&lt;code&gt;注意: React.PropTypes 自 React v15.5 起已弃用。请使用 prop-types 库代替。&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;栗子：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;React&lt;/span&gt; from &lt;span class=&quot;symbol&quot;&gt;&#39;reac&lt;/span&gt;t&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PropTypes&lt;/span&gt; from &lt;span class=&quot;symbol&quot;&gt;&#39;prop&lt;/span&gt;-types&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Greeting&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1&amp;gt;hello, &amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.name&amp;#125;&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Greeting&lt;/span&gt;.propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;type&quot;&gt;PropTypes&lt;/span&gt;.string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lhgcool.club/categories/technology/"/>
    
    
      <category term="react" scheme="http://www.lhgcool.club/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.lhgcool.club/2018/06/13/hello-world/"/>
    <id>http://www.lhgcool.club/2018/06/13/hello-world/</id>
    <published>2018-06-13T09:10:05.000Z</published>
    <updated>2018-06-13T09:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><a id="more"></a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github修改username</title>
    <link href="http://www.lhgcool.club/2018/06/13/github%E4%BF%AE%E6%94%B9username/"/>
    <id>http://www.lhgcool.club/2018/06/13/github修改username/</id>
    <published>2018-06-13T08:04:59.000Z</published>
    <updated>2018-06-13T09:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-首先在github官网上修改"><a href="#1-首先在github官网上修改" class="headerlink" title="1.首先在github官网上修改"></a>1.首先在github官网上修改</h4><p>  Settings -&gt; Account -&gt; Change username<br>  修改 username 会有一些想不到的副作用<br>  <img src="https://raw.githubusercontent.com/Hetty0/Hetty0.github.io/master/uploads/warning.png" alt="warning"></p>  <a id="more"></a><h4 id="2-修改本地项目git仓库地址"><a href="#2-修改本地项目git仓库地址" class="headerlink" title="2.修改本地项目git仓库地址"></a>2.修改本地项目git仓库地址</h4>  <figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">列出现有地址：<span class="string">git </span><span class="string">remote </span>-v</span><br><span class="line">设置远程地址：<span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span>远程仓库地址</span><br><span class="line">检查设置是否成功：<span class="string">git </span><span class="string">remote </span>–v，查看列出的地址是否正确</span><br><span class="line">设置项目的<span class="string">user.</span><span class="string">name跟</span><span class="string">github上</span>的<span class="string">username一</span>致（本人配置了<span class="string">github和</span><span class="string">gitlab，</span>所以只设置此项目的<span class="string">local </span><span class="string">name）</span></span><br><span class="line">  <span class="string">git </span><span class="string">config </span><span class="built_in">--local</span> <span class="string">user.</span><span class="string">name </span><span class="string">"github上的username"</span></span><br><span class="line"></span><br><span class="line">设置好了之后使用<span class="string">git </span><span class="string">push测</span>试一下，发现需要输入<span class="string">Username和</span><span class="string">password，</span>输入正确后，就可以正确使用了！✌️✌️✌️</span><br></pre></td></tr></table></figure><h4 id="3-修改hexo博客仓库地址"><a href="#3-修改hexo博客仓库地址" class="headerlink" title="3.修改hexo博客仓库地址"></a>3.修改hexo博客仓库地址</h4><p>  好像可以自动重定向，估计是刚改的名字，还没有更新。<br>  在_config.yml中修改<br>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  repo:</span> 新的仓库地址（不要忘了将博客仓库的名字改成对应的新名字）</span><br></pre></td></tr></table></figure></p><p>  注：<br>  修改git仓库名称<br>    进入需要修改名字的仓库，点击settings，首项Options中就可以看到Rename。</p><h4 id="4-域名DNS修改"><a href="#4-域名DNS修改" class="headerlink" title="4.域名DNS修改"></a>4.域名DNS修改</h4><p>  我使用的是godaddy上的域名，修改DNS配置<br>  类型：CNAME<br>  名称：www<br>   值：yourusername.github.io</p><p>  这样，使用你的域名和<a href="http://yourusername.github.io都可以访问你的博客网站啦！" target="_blank" rel="noopener">http://yourusername.github.io都可以访问你的博客网站啦！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-首先在github官网上修改&quot;&gt;&lt;a href=&quot;#1-首先在github官网上修改&quot; class=&quot;headerlink&quot; title=&quot;1.首先在github官网上修改&quot;&gt;&lt;/a&gt;1.首先在github官网上修改&lt;/h4&gt;&lt;p&gt;  Settings -&amp;gt; Account -&amp;gt; Change username&lt;br&gt;  修改 username 会有一些想不到的副作用&lt;br&gt;  &lt;img src=&quot;https://raw.githubusercontent.com/Hetty0/Hetty0.github.io/master/uploads/warning.png&quot; alt=&quot;warning&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://www.lhgcool.club/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://www.lhgcool.club/2018/05/21/markdown/"/>
    <id>http://www.lhgcool.club/2018/05/21/markdown/</id>
    <published>2018-05-21T03:47:43.000Z</published>
    <updated>2018-06-22T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>最高阶标题<br>=</p><p>第二阶标题<br>-</p><h1 id="标题–第1阶"><a href="#标题–第1阶" class="headerlink" title="标题–第1阶"></a>标题–第1阶</h1><h2 id="标题–第2阶"><a href="#标题–第2阶" class="headerlink" title="标题–第2阶"></a>标题–第2阶</h2><a id="more"></a><h3 id="标题–第3阶"><a href="#标题–第3阶" class="headerlink" title="标题–第3阶"></a>标题–第3阶</h3><h4 id="标题–第4阶"><a href="#标题–第4阶" class="headerlink" title="标题–第4阶"></a>标题–第4阶</h4><h5 id="标题–第5阶"><a href="#标题–第5阶" class="headerlink" title="标题–第5阶"></a>标题–第5阶</h5><h6 id="标题–第6阶"><a href="#标题–第6阶" class="headerlink" title="标题–第6阶"></a>标题–第6阶</h6><p><span id="anchor">锚点目标位置</span></p><h2 id="修辞和强调"><a href="#修辞和强调" class="headerlink" title="修辞和强调"></a>修辞和强调</h2><p>使用 <code>*</code>、<code>_</code> 作为标记，文字变成斜体<br>使用 <code>**</code>、<code>__</code> 作为标记，文字变成粗体<br>使用 <code>~~</code> 在文字前后添加删除线</p><p><em>斜体</em>   <em>斜体</em><br><strong>强调</strong>   <strong>强调</strong><br><del>删除线</del>   </p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表和无序列表</p><h4 id="无序列表使用-、-、-作为列表项目的标志。"><a href="#无序列表使用-、-、-作为列表项目的标志。" class="headerlink" title="无序列表使用*、+、- 作为列表项目的标志。"></a>无序列表使用*、+、- 作为列表项目的标志。</h4><ul><li>red</li><li>green</li><li>black</li></ul><ul><li><p>good</p><p>在一个列表项目中放多个段落，先插入一个空行，需要前面缩进4个空白或一个tab</p></li><li>better</li><li>best</li></ul><ul><li>big</li><li>small</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol><li>sun</li><li>moon</li><li>star</li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用 <code>|</code> 进行分割<br>| 笔记 | 更新 | 版本 |<br>|——|—–|—–|<br>| note | refresh | version|</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>  行内和参考两种方式，都是使用角括号把文字转成链接。<br>  参考链接可以为链接定一个名称，可以在文件的其他地方定义该链接的内容，链接名称可以为字母、数字、空格，但是不区分大小写</p><p>  语法：</p><ul><li><p><a href="http://example.com" title="with a title" target="_blank" rel="noopener">行内链接</a></p><p><code>[行内链接](&lt;http://example.com&gt;&#39;with a title&#39;)</code></p></li><li>[参考链接][3]</li></ul><pre><code>[3]: &lt;http://search.msn.com/&gt;       &apos;MSN Search&apos;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">参考链接</span>][<span class="symbol">3</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">3</span>]: <span class="link">&lt;http://search.msn.com/&gt; </span></span><br><span class="line"><span class="code">      'MSN Search'</span></span><br></pre></td></tr></table></figure></code></pre><p>  【注】：</p><ul><li>title属性可选 </li><li>title可以使用单引号、双引号、括弧包着( <code>&#39;&#39;</code>，<code>&quot;&quot;</code>，<code>()</code>  )。</li><li>网址可以使用<code>&lt;&gt;</code>包起来。栗子：<code>this is an [example link](&lt;http://example.com&gt;)</code></li><li><p>可以将title放在下一行，也可以增加一些缩进，让代码看起来好看。</p><p>栗子：</p><p>行内链接：this is an <a href="http://example.com" target="_blank" rel="noopener">example link</a></p><p><code>this is an [example link](http://example.com)</code><br>带title的链接： <a href="http://example.com/" title="with a title" target="_blank" rel="noopener">example link</a></p><p><code>[example link](http://example.com/ &#39;with a title&#39;)</code></p><p>参考链接：<br>I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3].</p></li></ul><p>[1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a> ‘Google’<br>[2]: <a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a> ‘Yahoo Search’<br>[3]: <a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a> ‘MSN Search’<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol">1</span>] than from [<span class="string">Yahoo</span>][<span class="symbol">2</span>] or [<span class="string">MSN</span>][<span class="symbol">3</span>].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://google.com/ 'Google'</span></span><br><span class="line">[<span class="symbol">2</span>]: <span class="link">http://search.yahoo.com/ 'Yahoo Search'</span></span><br><span class="line">[<span class="symbol">3</span>]: <span class="link">http://search.msn.com/ 'MSN Search'</span></span><br></pre></td></tr></table></figure></p><p>隐式链接标记功能，链接不指定名称，默认为链接文字。<br>用法：在链接文字后面加空的方括号。<br>栗子：<a href="http:google.com/" target="_blank" rel="noopener">Google</a>   </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http:google.com/</span></span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li>行内连接 （title 是可选属性）<br>语法：<code>![图片替换文字](图片路径 &#39;title可选&#39;)</code><br><img src="https://raw.githubusercontent.com/Hetty0/Hetty0.github.io/master/uploads/0.jpeg" alt="风景" title="Title"></li></ul><h2 id="其他链接"><a href="#其他链接" class="headerlink" title="其他链接"></a>其他链接</h2><p>自动链接：将网址直接用尖括号包裹即可<code>&lt;http://www.baidu.com&gt;</code><br> <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><p>  <a href="#anchor">锚点链接</a><br>  语法：<br>  <code>[锚点链接](#anchor)</code><br>  <code>&lt;span id=&quot;anchor&quot;&gt;锚点目标位置&lt;/span&gt;</code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在一般的段落文字中，使用反引号(`)来标记代码区段，区段内的&amp;、&lt; 和 &gt; 都会被自动转换成html实体，这样可以很容易的在代码区段内插入html 代码。   </p><p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.   </p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在代码前后增加三个反引号`(<figure class="highlight plain"><figcaption><span>pathon, javascript)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">``` java</span><br><span class="line">  int i = 0; i = 1;</span><br><span class="line">  for(int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">    printf(&apos;hello markdown\n&apos;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>如果要建立一个已经格式化好的代码区块，只要每行都缩进4个空格或者一个 tab 就可以了，而&amp;、&lt; 和 &gt; 也一样会自动转成 html 实体。</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>4个空格或者2个制表符可以开始代码区块, 一个代码区块会一直持续到没有缩进的那一行。</p><p>在代码区块中，一般的markdown语法不会被转换</p><pre><code>圣诞节法律框架房拉克丝京东方啦会计法拉克丝 肯德基发卡量双方均按时离开的房间爱可代发**强调**，不会转换*修饰*，不会转换时打开就发了时代峰峻绿山咖啡看电视剧法兰克</code></pre><p>可以在markdown文件中直接使用html标签，<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行与其他内容区隔开，还要求他们的开始标签和结束标签不能使用制表符或空格来缩进。</p><p>注意：在html区块内使用markdown样式会没有效果</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在文字前 添加 <code>&gt;</code>，在引用内也可以使用markdown语法<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 如果你无法简洁的表达你的想法，那只说明你还不够了解它。 -- 阿尔伯特·爱因斯坦</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># 标题一</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment">## 标题二</span></span></span><br></pre></td></tr></table></figure></p><blockquote><p>如果你无法简洁的表达你的想法，那只说明你还不够了解它。 – 阿尔伯特·爱因斯坦</p><h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2></blockquote><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><blockquote><br>  <p>for example</p><br>  example<br></blockquote> <h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p>在需要添加文件链接的词语后面添加<code>[^1]</code>，结尾加入<code>[^1]: 链接文件路径</code><br>hello<a href="./02test.md">^1</a>   </p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>一行中3个以上的 *、-、_ 可建立分割线， 行内不能有其他东西，可以有空格</p><h2 id=""><a href="#" class="headerlink" title="*"></a><em>*</em></h2><hr><h2 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h2><p>在html文件中，有两个字符需要特殊处理：&lt; 和 &amp; 。&lt; 符号用于起始标签，&amp;符号用于标记html实体，如果显示原型，需要使用实体的形式：<code>&amp;lt;</code> 和 <code>&amp;amp;</code></p><h2 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠 \"></a>反斜杠 \</h2><p>markdown 可以利用 \ 来插入一些在语法上有其他意义的符号。markdown支持一下这些符号加上反斜杠来帮助输入普通的符号。   </p><pre><code>\ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号</code></pre><h2 id="markdown-preview-enhanced-插件"><a href="#markdown-preview-enhanced-插件" class="headerlink" title="markdown preview enhanced 插件"></a>markdown preview enhanced 插件</h2><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ol><li>mermaid</li></ol><p>暂时没有找到hexo渲染mermaid的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">  A--&gt;B;</span><br><span class="line">  B--&gt;C;</span><br><span class="line">  C--&gt;A;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure><h2 id="流程图（flowchart）"><a href="#流程图（flowchart）" class="headerlink" title="流程图（flowchart）"></a>流程图（flowchart）</h2><p>  在博客使用流程图 </p><ol><li>npm install –save hexo-filter-flowchart</li><li>在_config.yml中配置</li></ol>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart:</span><br><span class="line"># raphael:   # optional, the source url <span class="keyword">of</span> raphael.js</span><br><span class="line"># flowchart: # optional, the source url <span class="keyword">of</span> flowchart.js</span><br><span class="line">options: # options used for `drawSVG`</span><br></pre></td></tr></table></figure><p>  栗子：<br>  <figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flow</span><br><span class="line">  st=&gt;start: Start|<span class="type">past</span>:&gt;http://www.google.com[blank]</span><br><span class="line">  e=&gt;<span class="keyword">end</span>: <span class="keyword">End</span>:&gt;http://www.google.com</span><br><span class="line">  op1=&gt;operation: My Operation|<span class="type">past</span></span><br><span class="line">  op2=&gt;operation: Stuff|<span class="type">current</span></span><br><span class="line">  sub1=&gt;subroutine: My Subroutine|<span class="type">invalid</span></span><br><span class="line">  cond=&gt;condition: Yes</span><br><span class="line">  or No?|<span class="type">approved</span>:&gt;http://www.google.com</span><br><span class="line">  c2=&gt;condition: Good idea|<span class="type">rejected</span></span><br><span class="line">  io=&gt;inputoutput: catch something...|<span class="type">request</span></span><br><span class="line"></span><br><span class="line">  st-&gt;op1(<span class="built_in">right</span>)-&gt;cond</span><br><span class="line">  cond(yes, <span class="built_in">right</span>)-&gt;c2</span><br><span class="line">  cond(no)-&gt;sub1(<span class="built_in">left</span>)-&gt;op1</span><br><span class="line">  c2(yes)-&gt;io-&gt;e</span><br><span class="line">  c2(no)-&gt;op2-&gt;e</span><br></pre></td></tr></table></figure></p><div id="flowchart-0" class="flow-chart"></div><h2 id="关于博客中添加图片"><a href="#关于博客中添加图片" class="headerlink" title="关于博客中添加图片"></a>关于博客中添加图片</h2><p>在博客中添加图片，图片地址为：<a href="https://raw.githubusercontent.com/yourname/yourname.github.io/master/foldername/filename.xxx" target="_blank" rel="noopener">https://raw.githubusercontent.com/yourname/yourname.github.io/master/foldername/filename.xxx</a>;</p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Start|past:>http://www.google.com[blank]e=>end: End:>http://www.google.comop1=>operation: My Operation|pastop2=>operation: Stuff|currentsub1=>subroutine: My Subroutine|invalidcond=>condition: Yesor No?|approved:>http://www.google.comc2=>condition: Good idea|rejectedio=>inputoutput: catch something...|requestst->op1(right)->condcond(yes, right)->c2cond(no)->sub1(left)->op1c2(yes)->io->ec2(no)->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;最高阶标题&lt;br&gt;=&lt;/p&gt;
&lt;p&gt;第二阶标题&lt;br&gt;-&lt;/p&gt;
&lt;h1 id=&quot;标题–第1阶&quot;&gt;&lt;a href=&quot;#标题–第1阶&quot; class=&quot;headerlink&quot; title=&quot;标题–第1阶&quot;&gt;&lt;/a&gt;标题–第1阶&lt;/h1&gt;&lt;h2 id=&quot;标题–第2阶&quot;&gt;&lt;a href=&quot;#标题–第2阶&quot; class=&quot;headerlink&quot; title=&quot;标题–第2阶&quot;&gt;&lt;/a&gt;标题–第2阶&lt;/h2&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lhgcool.club/categories/technology/"/>
    
    
      <category term="markdown" scheme="http://www.lhgcool.club/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>关于angular material的一点东西</title>
    <link href="http://www.lhgcool.club/2017/08/16/%E5%85%B3%E4%BA%8Eangular-material%E7%9A%84%E4%B8%80%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
    <id>http://www.lhgcool.club/2017/08/16/关于angular-material的一点东西/</id>
    <published>2017-08-16T09:44:46.000Z</published>
    <updated>2018-06-13T09:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="md-select"><a href="#md-select" class="headerlink" title="md-select"></a>md-select</h3><p>当使用ng-repeat时，如果为一般数组时，可以使用一下代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"MyCtrl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">md-select</span> <span class="attr">ng-model</span>=<span class="string">"selectedUser"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">md-option</span> <span class="attr">ng-value</span>=<span class="string">"user"</span> <span class="attr">ng-repeat</span>=<span class="string">"user in users"</span>&gt;</span></span><span class="template-variable">&#123;&#123; user.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">md-option</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">md-select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>如果数组里为对象时，就要添加ng-model-options属性。</p><pre><code>&lt;div ng-controller=&quot;MyCtrl&quot;&gt;    &lt;md-select ng-model=&quot;selectedUser&quot; ng-model-options=&quot;{trackBy: &apos;$value.id&apos;}&quot;&gt;        &lt;md-option ng-value=&quot;user&quot; ng-repeat=&quot;user in users&quot;&gt;{{ user.name }}&lt;/md-option&gt;    &lt;/md-select&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;md-select&quot;&gt;&lt;a href=&quot;#md-select&quot; class=&quot;headerlink&quot; title=&quot;md-select&quot;&gt;&lt;/a&gt;md-select&lt;/h3&gt;&lt;p&gt;当使用ng-repeat时，如果为一般数组时，可以使用一下代码：&lt;br&gt;&lt;figur
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lhgcool.club/categories/technology/"/>
    
    
      <category term="angular-material" scheme="http://www.lhgcool.club/tags/angular-material/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo如何修改博客主题</title>
    <link href="http://www.lhgcool.club/2017/08/14/%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    <id>http://www.lhgcool.club/2017/08/14/关于如何修改博客主题/</id>
    <published>2017-08-14T11:43:11.000Z</published>
    <updated>2018-06-13T09:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo主题地址：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>hexo官网地址：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a><br>hexo git地址：<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p><p><strong>个人感觉不错的主题：</strong></p><ul><li>Anisina <a href="http://haojen.github.io/" target="_blank" rel="noopener">http://haojen.github.io/</a></li><li>BlueLake <a href="http://chaoo.oschina.io/" target="_blank" rel="noopener">http://chaoo.oschina.io/</a></li><li>Chan <a href="http://blog.sprabbit.com/hexo-theme-chan/" target="_blank" rel="noopener">http://blog.sprabbit.com/hexo-theme-chan/</a></li><li>JSimple <a href="https://shuoit.net/" target="_blank" rel="noopener">https://shuoit.net/</a></li><li>hexo-theme-yilia <a href="http://litten.me/" target="_blank" rel="noopener">http://litten.me/</a></li></ul><a id="more"></a><h2 id="修改主题流程"><a href="#修改主题流程" class="headerlink" title="修改主题流程"></a>修改主题流程</h2><ul><li><code>进入hexo目录：$ cd hexo</code></li><li><code>下载你喜欢的主题：$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></li><li><code>配置_config.yml中主题信息：theme: yilia</code></li><li><code>执行 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></li><li><code>执行 $ hexo server 就可以在本地服务器看到效果</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo主题地址：&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/themes/&lt;/a&gt;&lt;br&gt;hexo官网地址：&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://hexo.io/&lt;/a&gt;&lt;br&gt;hexo git地址：&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/hexojs/hexo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人感觉不错的主题：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Anisina &lt;a href=&quot;http://haojen.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://haojen.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BlueLake &lt;a href=&quot;http://chaoo.oschina.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://chaoo.oschina.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chan &lt;a href=&quot;http://blog.sprabbit.com/hexo-theme-chan/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.sprabbit.com/hexo-theme-chan/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSimple &lt;a href=&quot;https://shuoit.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://shuoit.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hexo-theme-yilia &lt;a href=&quot;http://litten.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://litten.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lhgcool.club/categories/technology/"/>
    
    
      <category term="hexo" scheme="http://www.lhgcool.club/tags/hexo/"/>
    
  </entry>
  
</feed>
